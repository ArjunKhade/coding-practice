package dsa;

public class SinglyLinkedList {
	
	      public Node head;
	      public int size;
	      
	      public SinglyLinkedList(Node head) {
				this.head = null;
			}
	
	   public void addAtStart(int data) {
		   Node newNode = new Node(data);
		   
		   newNode.next=head;
		   
		   head=newNode;
		   
		   size++;
	   }
	
	   public int deleteAtFirst() {
		   int temp = head.data;
		   head=head.next;
		   size--;
		   return temp;
	   }
	
	 public void deleteAtLast() {
		 Node current = head;
		 if(head.next == null) {
			 head =null;
		 }else {
			 while(current.next.next != null) {
				 current = current.next;
			 }
			 int temp = current.next.data;
			 current.next=null;
			 size--;
		 }
	 }
	 
	 public void addAtEnd(int data) {
		 if(head == null) {
			 addAtStart(data);
		 }else {
			 Node newNode = new Node(data);
			Node current = head;
			while(current.next != null) {
				current=current.next;
			}
			current.next = newNode;
			size++;
		}
	 }
	
	 public int elementAt(int index) {
		 if(index > size) {
			 return -1;
		 }
		 
		 Node current = head;
		 
		 while(index-1 != 0) {
			 current=current.next;
			 index--;
		 }
		 
		 return current.data;
	 }
	
  public	int getSize() {
		return size;
	}
	
	public int search (int data) {
		Node current = head;
		int count = 1;
		while(current!=null) {
			if(current.data == data) {
				return count;
			}else {
				current=current.next;
				count++;
			}
		}
		return -1;
	}
	
	
	

	

	public static void main(String[] args) {
		
	
		

	}
	
	class Node{
		 
		int data;
		Node next;
		
		public Node(int data) {
			super();
			this.data = data;
			this.next = null;
		}
		
		
	}
	
	

}
